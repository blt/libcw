var searchIndex = {};
searchIndex["libcw"] = {"doc":"Your one-stop shop for everything Core Wars","items":[[0,"redcode","libcw","Datastructures for representing redcode instructions",null,null],[3,"Instruction","libcw::redcode","Redcode instruction",null,null],[0,"traits","","Traits for describing redcode instructions",null,null],[8,"Instruction","libcw::redcode::traits","A trait indicating that a the implementing type can be interpreted as an  redcode instruction",null,null],[10,"op","","Get the opcode",0,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[10,"set_op","","Set the instruction opcode",0,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":null}],[10,"modifier","","Get Operation Mode",0,{"inputs":[{"name":"self"}],"output":{"name":"modifier"}}],[10,"set_modifier","","Set operation mode",0,{"inputs":[{"name":"self"},{"name":"modifier"}],"output":null}],[10,"a","","Get the value of the A field",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"set_a","","Set the value of the A field",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":null}],[10,"a_mode","","Get the addressing mode of the A Field",0,{"inputs":[{"name":"self"}],"output":{"name":"addressingmode"}}],[10,"set_a_mode","","Set the addressing mode of the A field",0,{"inputs":[{"name":"self"},{"name":"addressingmode"}],"output":null}],[10,"b","","Get value of the B field",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[10,"set_b","","Set the value of the B field",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":null}],[10,"b_mode","","Get the addressing mode of the B field",0,{"inputs":[{"name":"self"}],"output":{"name":"addressingmode"}}],[10,"set_b_mode","","Set the AddressingMode of the B field",0,{"inputs":[{"name":"self"},{"name":"addressingmode"}],"output":null}],[0,"types","libcw::redcode","Supporting redcode types",null,null],[4,"OpCode","libcw::redcode::types","Operations that a redcode processor can perform",null,null],[13,"Dat","","Data, kills thread on execution",1,null],[13,"Mov","","Move (copy)",1,null],[13,"Add","","Add",1,null],[13,"Sub","","Subtract",1,null],[13,"Mul","","Multiply",1,null],[13,"Div","","Divide",1,null],[13,"Mod","","Modulo",1,null],[13,"Jmp","","Jump",1,null],[13,"Jmz","","Jump if zero",1,null],[13,"Jmn","","Jump if not zero",1,null],[13,"Djn","","Decrement by one and Jump if not zero",1,null],[13,"Spl","","Create a new execution thread at target address",1,null],[13,"Seq","","Compare",1,null],[13,"Sne","","Skip if not equal",1,null],[13,"Slt","","Skip if less than",1,null],[13,"Ldp","","Load from P-space",1,null],[13,"Stp","","Save to P-space",1,null],[13,"Nop","","No operation",1,null],[4,"Modifier","","Controls modes for what components of an instruction and OPCODE will operate on",null,null],[13,"A","","A-field to A-field",2,null],[13,"B","","B-field to B-field",2,null],[13,"AB","","A field to B field",2,null],[13,"BA","","B-field to A-field",2,null],[13,"X","","A-field to B-field AND B-field to A-field",2,null],[13,"F","","A-field to A-field AND B-field to B-field",2,null],[13,"I","","Whole instruction",2,null],[4,"AddressingMode","","Field Addressing mode: controls how the `offset` behaves",null,null],[13,"Immediate","","Literal value e.g \"2\"",3,null],[13,"Direct","","Direct pointer to another instruction",3,null],[13,"AIndirect","","Indirect addressing by target's A field",3,null],[13,"BIndirect","","Indirect addressing by target's B field",3,null],[13,"AIndirectPreDecrement","","Indirect addressing by target's A field, target instructions A field is decremented before calculating the target address",3,null],[13,"BIndirectPreDecrement","","Indirect addressing by target's A field, target instructions B field is decremented before calculating the target address",3,null],[13,"AIndirectPostIncrement","","Indirect addressing by target's A field, target instructions B field is incremented after calculating the target address",3,null],[13,"BIndirectPostIncrement","","Indirect addressing by target's B field, target instructions B field is incremented after calculating the target address",3,null],[6,"Address","","Address in a core",null,null],[6,"Value","","`Field` Value ",null,null],[6,"Pid","","Process ID",null,null],[6,"Pin","","P-space PIN",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"modifier"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"modifier"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"addressingmode"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"addressingmode"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","libcw::redcode","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"new","","Create a new instruction",4,{"inputs":[{"name":"opcode"},{"name":"modifier"},{"name":"value"},{"name":"addressingmode"},{"name":"value"},{"name":"addressingmode"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"instruction"}}],[11,"op","","",4,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"set_op","","",4,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":null}],[11,"modifier","","",4,{"inputs":[{"name":"self"}],"output":{"name":"modifier"}}],[11,"set_modifier","","",4,{"inputs":[{"name":"self"},{"name":"modifier"}],"output":null}],[11,"a","","",4,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"set_a","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":null}],[11,"a_mode","","",4,{"inputs":[{"name":"self"}],"output":{"name":"addressingmode"}}],[11,"set_a_mode","","",4,{"inputs":[{"name":"self"},{"name":"addressingmode"}],"output":null}],[11,"b","","",4,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"set_b","","",4,{"inputs":[{"name":"self"},{"name":"value"}],"output":null}],[11,"b_mode","","",4,{"inputs":[{"name":"self"}],"output":{"name":"addressingmode"}}],[11,"set_b_mode","","",4,{"inputs":[{"name":"self"},{"name":"addressingmode"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"simulation","libcw","Datastructures and functions for building and simulating a redcode core",null,null],[3,"Mars","libcw::simulation","Core wars runtime",null,null],[3,"MarsBuilder","","A `Mars` builder. Provides control over how the `Mars` is configured",null,null],[4,"LoadError","","Errors that can occur during loading",null,null],[13,"InvalidLength","","Validation error: program has invalid length",5,null],[13,"InvalidDistance","","Validation error: invalid distance between programs",5,null],[13,"EmptyLoad","","Load cannot be called with no programs",5,null],[4,"SimulationEvent","","Events that can happen during a running simulation",null,null],[13,"MaxCyclesReached","","Game ended in a tie",6,null],[13,"Split","","Process split inner contains address of new pc",6,null],[13,"Terminated","","A process terminated",6,null],[13,"Halted","","The Mars halted",6,null],[13,"Jumped","","A process jumped address",6,null],[13,"Skipped","","Skipped happens in all `Skip if ...` instructions",6,null],[13,"Stepped","","Nothing happened",6,null],[4,"SimulationError","","Errors that can occur during simulation",null,null],[13,"Halted","","Core was already halted",7,null],[4,"BuilderError","","Errors that can occur from invalid `MarsBuilder` configuration",null,null],[13,"ProgramTooLong","","Program is longer than the core allows",8,null],[13,"InvalidOffset","","A provided offset would violate a constraint of the `Mars`",8,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"simulationerror"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"simulationerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loaderror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"loaderror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"simulationevent"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"simulationevent"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"mars"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"mars"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"mars"}],"output":{"name":"bool"}}],[11,"step","","Step forward one cycle",9,{"inputs":[{"name":"self"}],"output":{"name":"simulationresult"}}],[11,"halted","","Has the core finished its execution. This can mean either a tie has occurred or a warrior has emerged victoriors",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Reset the Mars's memory and the process queue",9,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_hard","","Reset the Mar's memory, process queue, AND P-space",9,{"inputs":[{"name":"self"}],"output":null}],[11,"load_batch","","Load mutliple programs into the Mars, checking their spacing and their length # Arguments * `programs`: programs and load information loaded in a tuple, cannot     be empty # Return `Ok(())` if the load was successful, otherwise an error with the      corresponding `SimulationError`",9,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"loadresult"}}],[11,"pc","","Get `Pid` currently executing on the core",9,{"inputs":[{"name":"self"}],"output":{"name":"address"}}],[11,"pcs","","Get the program counters for all processes",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"cycle","","Current cycle core is executing",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pid","","Get the current `Pid` executing",9,{"inputs":[{"name":"self"}],"output":{"name":"pid"}}],[11,"pids","","Get all `Pid`s that are currently active in the order they will be  executing",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"size","","Size of memory",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pspace_size","","Size of private storage space",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"version","","Version of core multiplied by `100`",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_processes","","Maximum number of processes that can be in the core queue",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_cycles","","Maximum number of cycles before a tie is declared",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_length","","Maximum number of instructions allowed in a program",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"min_distance","","Minimum distance allowed between programs",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"memory","","Get immutable reference to memory",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"pspace","","Get an immutable reference to private storage",9,{"inputs":[{"name":"self"}],"output":{"name":"hashmap"}}],[11,"process_count","","Get the number of processes currently running",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_queue","","Fetch reference to current queue",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"buildererror"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"buildererror"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"marsbuilder"}}],[11,"new","","Create a `MarsBuilder` with default parameters",10,{"inputs":[],"output":{"name":"self"}}],[11,"build_and_load","","Build a core and load it with specified programs",10,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"loadresult"}}],[11,"build","","Build a halted mars",10,{"inputs":[{"name":"self"}],"output":{"name":"mars"}}],[11,"size","","Size of memory",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"pspace_size","","Size of each warrior's P-space",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_cycles","","Maximum number of cycles that can elapse before a tie is declared",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_processes","","Maximum number of processes a core can have in it's process queue",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_length","","Maximum number of instructions allowed in a program",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"min_distance","","Minimum distance between warriors",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"version","","Mars version multiplied by 100 (e.g. version 0.8 -> 80)",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[6,"LoadResult","","",null,null],[6,"SimulationResult","","",null,null],[0,"parser","libcw","Tools for parsing strings into usable redcode instructions",null,null],[3,"ParseError","libcw::parser","Structure containing all data about an error occuring during parsing",null,null],[5,"parse_into","","Parse a string into `Instruction`s placing them in a buffer",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"parseresult"}}],[5,"parse","","Parse a string into `Instruction`s # Arguments `program_str`: text of program",null,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[6,"ParseResult","","Result of a parse",null,null]],"paths":[[8,"Instruction"],[4,"OpCode"],[4,"Modifier"],[4,"AddressingMode"],[3,"Instruction"],[4,"LoadError"],[4,"SimulationEvent"],[4,"SimulationError"],[4,"BuilderError"],[3,"Mars"],[3,"MarsBuilder"]]};
initSearch(searchIndex);
